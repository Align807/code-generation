package ${package};

import ${package}.impl.*;

import java.util.Collection;

import org.protege.owl.codegeneration.FactoryHelper;
import org.protege.owl.codegeneration.ProtegeJavaMapping;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * Generated by Protege (http://protege.stanford.edu).
 * Source Class: ${factoryClass}
 * @version generated on ${date} by ${user}
 */
public class ${factoryClass} {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;

    public ${factoryClass}(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public ${factoryClass}(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
        
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
